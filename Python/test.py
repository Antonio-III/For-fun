
def len_args_not_equal_to_num(*args:iter,num:int)->bool:
    checker = []
    try:
        for arg in args:
            checker+=[len(arg)!=num]
    except TypeError:
        raise TypeError(f"len() cannot be applied to {type(arg)} {arg}.")
    else:
        return any(checker)


all_sets = {'S^0': {'S^0_0': [(1, 0)]}, 'S^1': {'S^1_1': [(0.9, 30)], 'S^1_2': [(0.99, 60)]}, 'S^2': {'S^2_1': [(0.72, 45)], 'S^2_2': [(0.864, 60)], 'S^2_3': [(0.8928, 75)]}, 'S^3': {'S^3_1': [(0.36, 65), (0.432, 80)], 'S^3_2': [(0.54, 85), (0.648, 100)]}}

all_main_sets = {'S^0': [(1, 0)], 'S^1': [(0.9, 30), (0.99, 60)], 'S^2': [(0.72, 45), (0.864, 60), (0.8928, 75)]}

all_subsets = {'S^0_0': [(1, 0)], 'S^1_1': [(0.9, 30)], 'S^1_2': [(0.99, 60)], 'S^2_1': [(0.72, 45)], 'S^2_2': [(0.864, 60)], 'S^2_3': [(0.8928, 75)], 'S^3_1': [(0.36, 65), (0.432, 80)], 'S^3_2': [(0.54, 85), (0.648, 100)]}
                                                
d = {'S^2_1': [(0.72, 45), (0.6792, 75)], 'S^2_2': [(0.464, 60)], 'S^2_3': [(0.8928, 75)]}
a = [(0.72, 45), (0.5792, 75), (0.864, 60), (0.8928, 75)]

highest_r_in_last_device = (0.648, 100)
devices = 3

d = {'S^0_0': [(1, 0)]}
d2={'S^1_1': [(0.9, 30)], 'S^1_2': [(0.99, 60)]}


out=len_args_not_equal_to_num([1,2,3],(1,2),num=3)
print(out)

